{"version":3,"file":"static/js/143.25b7f028.chunk.js","mappings":"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","sources":["components/SignIn/RegistrationLink/RegistrationLink.styled.js","components/SignIn/RegistrationLink/RegistrationLink.jsx","components/SignIn/SigninForm/SigninForm.jsx","components/SignIn/SignIn.jsx","pages/SigninPage/SigninPage.jsx"],"sourcesContent":["import { styled } from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { TRANSITION, SIZE, COLOR } from 'constants';\n\nexport const RegistrationLinkStyled = styled(Link)`\n  color: ${COLOR.second};\n  font-family: Poppins;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n\n  text-decoration-line: underline;\n  transition: ${TRANSITION.forHoverColor};\n\n  &:hover,\n  &:focus {\n    color: ${COLOR.main};\n  }\n  @media screen and (min-width: ${SIZE.tablet}) {\n    font-size: 16px;\n  }\n`;\n","import { RegistrationLinkStyled } from './RegistrationLink.styled';\n\nexport default function RegistrationLink() {\n  return (\n    <RegistrationLinkStyled to=\"/register\">Registration</RegistrationLinkStyled>\n  );\n}\n","import * as yup from 'yup';\nimport { useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { useAuth } from 'hooks';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport RegistrationLink from '../RegistrationLink/RegistrationLink';\nimport {\n  Box,\n  FormSignin,\n  IconWrapper,\n  SigninButton,\n  SigninButtonWrapper,\n  SigninInput,\n  SigninInputWrapper,\n  SigninLabel,\n  ValidMessage,\n  ValidationIcon,\n  Warning,\n} from './SigninForm.styled';\nimport { ReactComponent as EmailIcon } from '../../../assets/images/signin/mail-01.svg';\nimport { ReactComponent as LockIcon } from '../../../assets/images/signin/lock-02.svg';\nimport { ReactComponent as ErrorIcon } from '../../../assets/images/signin/error.svg';\nimport { ReactComponent as ValidIcon } from '../../../assets/images/signin/iconvalid.svg';\nimport { login } from 'redux/auth/operations';\n\nimport { mailRegexp } from 'constants';\n\nconst validationSchema = yup.object({\n  email: yup\n    .string('Enter your email')\n    .matches(mailRegexp, 'Enter a valid email')\n    .required('Email is required'),\n  password: yup\n    .string('Enter your password')\n    .min(8, 'Password should be of minimum 8 characters length')\n    .required('Password is required'),\n});\n\nexport default function SigninForm() {\n  const dispatch = useDispatch();\n  const { authError } = useAuth();\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validationSchema: validationSchema,\n    onSubmit: (values, { resetForm }) => {\n      dispatch(login(values));\n      resetForm();\n    },\n  });\n\n  const notifyError = msg => {\n    toast.error(msg, {\n      toastId: 'idError',\n    });\n  };\n\n  const handleClearEmail = () => {\n    formik.setFieldValue('email', '');\n  };\n  const handleClearPassword = () => {\n    formik.setFieldValue('password', '');\n  };\n  return (\n    <Box>\n      {authError && notifyError(authError)}\n      <FormSignin onSubmit={formik.handleSubmit}>\n        <SigninLabel>Sign In</SigninLabel>\n\n        <SigninInputWrapper\n          className={\n            formik.submitCount > 0 && formik.errors.email\n              ? 'input__error'\n              : formik.touched.email && !formik.errors.email\n              ? 'input__valid'\n              : ''\n          }\n        >\n          <IconWrapper>\n            <EmailIcon />\n          </IconWrapper>\n\n          <SigninInput\n            id=\"email\"\n            name=\"email\"\n            placeholder=\"Email\"\n            autoComplete=\"off\"\n            value={formik.values.email}\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n          />\n          {formik.submitCount > 0 && formik.errors.email ? (\n            <>\n              <Warning>{formik.errors.email}</Warning>\n              <ValidationIcon onClick={handleClearEmail}>\n                <ErrorIcon />\n              </ValidationIcon>\n            </>\n          ) : formik.touched.email && !formik.errors.email ? (\n            <>\n              <ValidationIcon>\n                <ValidIcon />\n              </ValidationIcon>\n            </>\n          ) : null}\n        </SigninInputWrapper>\n        <SigninInputWrapper\n          className={\n            formik.submitCount > 0 && formik.errors.password\n              ? 'input__error'\n              : formik.touched.password && !formik.errors.password\n              ? 'input__valid'\n              : ''\n          }\n        >\n          <IconWrapper>\n            <LockIcon />\n          </IconWrapper>\n\n          <SigninInput\n            id=\"password\"\n            type=\"password\"\n            name=\"password\"\n            autoComplete=\"off\"\n            placeholder=\"Password\"\n            value={formik.values.password}\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n          />\n\n          {formik.submitCount > 0 && formik.errors.password ? (\n            <>\n              <Warning>{formik.errors.password}</Warning>\n              <ValidationIcon onClick={handleClearPassword}>\n                <ErrorIcon />\n              </ValidationIcon>\n            </>\n          ) : formik.touched.password && !formik.errors.password ? (\n            <>\n              <ValidMessage>Password is secure</ValidMessage>\n              <ValidationIcon>\n                <ValidIcon />\n              </ValidationIcon>\n            </>\n          ) : null}\n        </SigninInputWrapper>\n        <SigninButtonWrapper>\n          <SigninButton type=\"submit\">Sign In</SigninButton>\n        </SigninButtonWrapper>\n      </FormSignin>\n      <RegistrationLink />\n      <ToastContainer autoClose={false} />\n    </Box>\n  );\n}\n","import SigninForm from 'components/SignIn/SigninForm/SigninForm';\nimport AuthImg from 'components/AuthContainer/AuthImg';\nimport AuthContainer from 'components/AuthContainer/AuthContainer';\n\nexport default function Signin() {\n  return (\n    <AuthContainer>\n      <AuthImg />\n      <SigninForm />\n    </AuthContainer>\n  );\n}\n","import { useSearchParams } from 'react-router-dom';\nimport Signin from 'components/SignIn/SignIn';\nimport { useDispatch } from 'react-redux';\nimport { verify } from 'redux/auth/operations';\n\nexport default function SigninPage() {\n  const [searchParams] = useSearchParams();\n  const verifyId = searchParams.get('verify');\n\n  const dispatch = useDispatch();\n\n  if (verifyId) {\n    setTimeout(() => dispatch(verify(verifyId)), 200);\n  }\n\n  return <Signin />;\n}\n"],"names":["RegistrationLinkStyled","styled","Link","_templateObject","_taggedTemplateLiteral","COLOR","TRANSITION","SIZE","RegistrationLink","_jsx","to","children","validationSchema","yup","email","matches","mailRegexp","required","password","min","SigninForm","msg","dispatch","useDispatch","authError","useAuth","formik","useFormik","initialValues","onSubmit","values","_ref","resetForm","login","_jsxs","Box","toast","toastId","FormSignin","handleSubmit","SigninLabel","SigninInputWrapper","className","submitCount","errors","touched","IconWrapper","EmailIcon","SigninInput","id","name","placeholder","autoComplete","value","onChange","handleChange","onBlur","handleBlur","_Fragment","Warning","ValidationIcon","onClick","setFieldValue","ErrorIcon","ValidIcon","LockIcon","type","ValidMessage","SigninButtonWrapper","SigninButton","ToastContainer","autoClose","Signin","AuthContainer","AuthImg","SigninPage","_useSearchParams","useSearchParams","verifyId","_slicedToArray","get","setTimeout","verify"],"sourceRoot":""}