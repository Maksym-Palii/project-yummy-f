{"version":3,"file":"static/js/143.a95ec300.chunk.js","mappings":"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","sources":["components/SignIn/RegistrationLink/RegistrationLink.styled.js","components/SignIn/RegistrationLink/RegistrationLink.jsx","components/SignIn/SigninForm/SigninForm.jsx","components/SignIn/SignIn.jsx","pages/SigninPage/SigninPage.jsx"],"sourcesContent":["import { styled } from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { TRANSITION, SIZE, COLOR } from 'constants';\n\nexport const RegistrationLinkStyled = styled(Link)`\n  color: ${COLOR.second};\n  font-family: Poppins;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n\n  text-decoration-line: underline;\n  transition: ${TRANSITION.forHoverColor};\n\n  &:hover,\n  &:focus {\n    color: ${COLOR.main};\n  }\n  @media screen and (min-width: ${SIZE.tablet}) {\n    font-size: 16px;\n  }\n`;\n","import { RegistrationLinkStyled } from './RegistrationLink.styled';\n\nexport default function RegistrationLink() {\n  return (\n    <RegistrationLinkStyled to=\"/register\">Registration</RegistrationLinkStyled>\n  );\n}\n","import * as yup from 'yup';\nimport { useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { useAuth } from 'hooks';\nimport { useRef } from 'react';\nimport { toast } from 'react-toastify';\n\nimport RegistrationLink from '../RegistrationLink/RegistrationLink';\nimport {\n  Box,\n  FormSignin,\n  IconWrapper,\n  SigninButton,\n  SigninButtonWrapper,\n  SigninInput,\n  SigninInputWrapper,\n  SigninLabel,\n  ValidMessage,\n  ValidationIcon,\n  Warning,\n} from './SigninForm.styled';\nimport { ReactComponent as EmailIcon } from '../../../assets/images/signin/mail-01.svg';\nimport { ReactComponent as LockIcon } from '../../../assets/images/signin/lock-02.svg';\nimport { ReactComponent as ErrorIcon } from '../../../assets/images/signin/error.svg';\nimport { ReactComponent as ValidIcon } from '../../../assets/images/signin/iconvalid.svg';\nimport { login } from 'redux/auth/operations';\n\nimport { mailRegexp } from 'constants';\n\nconst validationSchema = yup.object({\n  email: yup\n    .string('Enter your email')\n    .matches(mailRegexp, 'Enter a valid email')\n    .required('Email is required'),\n  password: yup\n    .string('Enter your password')\n    .min(8, 'Password should be of minimum 8 characters length')\n    .required('Password is required'),\n});\n\nexport default function SigninForm() {\n  const dispatch = useDispatch();\n  const { authError } = useAuth();\n\n  const firstMessage = useRef(true);\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validationSchema: validationSchema,\n    onSubmit: (values, { resetForm }) => {\n      firstMessage.current = true;\n      dispatch(login(values))\n        .unwrap()\n        .then(originalPromiseResult => {\n          resetForm();\n        })\n        .catch(rejectedValueOrSerializedError => {});\n    },\n  });\n\n  function notifyError(msg) {\n    firstMessage.current = false;\n    toast.error(msg, {\n      toastId: 'idError',\n      autoClose: 3000,\n    });\n  }\n\n  const handleClearEmail = () => {\n    formik.setFieldValue('email', '');\n  };\n  const handleClearPassword = () => {\n    formik.setFieldValue('password', '');\n  };\n  return (\n    <Box>\n      {authError && firstMessage.current && notifyError(authError)}\n      <FormSignin onSubmit={formik.handleSubmit}>\n        <SigninLabel>Sign In</SigninLabel>\n\n        <SigninInputWrapper\n          className={\n            formik.submitCount > 0 && formik.errors.email\n              ? 'input__error'\n              : formik.touched.email && !formik.errors.email\n              ? 'input__valid'\n              : ''\n          }\n        >\n          <IconWrapper>\n            <EmailIcon />\n          </IconWrapper>\n\n          <SigninInput\n            id=\"email\"\n            name=\"email\"\n            placeholder=\"Email\"\n            autoComplete=\"off\"\n            value={formik.values.email}\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n          />\n          {formik.submitCount > 0 && formik.errors.email ? (\n            <>\n              <Warning>{formik.errors.email}</Warning>\n              <ValidationIcon onClick={handleClearEmail}>\n                <ErrorIcon />\n              </ValidationIcon>\n            </>\n          ) : formik.touched.email && !formik.errors.email ? (\n            <>\n              <ValidationIcon>\n                <ValidIcon />\n              </ValidationIcon>\n            </>\n          ) : null}\n        </SigninInputWrapper>\n        <SigninInputWrapper\n          className={\n            formik.submitCount > 0 && formik.errors.password\n              ? 'input__error'\n              : formik.touched.password && !formik.errors.password\n              ? 'input__valid'\n              : ''\n          }\n        >\n          <IconWrapper>\n            <LockIcon />\n          </IconWrapper>\n\n          <SigninInput\n            id=\"password\"\n            type=\"password\"\n            name=\"password\"\n            autoComplete=\"off\"\n            placeholder=\"Password\"\n            value={formik.values.password}\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n          />\n\n          {formik.submitCount > 0 && formik.errors.password ? (\n            <>\n              <Warning>{formik.errors.password}</Warning>\n              <ValidationIcon onClick={handleClearPassword}>\n                <ErrorIcon />\n              </ValidationIcon>\n            </>\n          ) : formik.touched.password && !formik.errors.password ? (\n            <>\n              <ValidMessage>Password is secure</ValidMessage>\n              <ValidationIcon>\n                <ValidIcon />\n              </ValidationIcon>\n            </>\n          ) : null}\n        </SigninInputWrapper>\n        <SigninButtonWrapper>\n          <SigninButton type=\"submit\">Sign In</SigninButton>\n        </SigninButtonWrapper>\n      </FormSignin>\n      <RegistrationLink />\n    </Box>\n  );\n}\n","import SigninForm from 'components/SignIn/SigninForm/SigninForm';\nimport AuthImg from 'components/AuthContainer/AuthImg';\nimport AuthContainer from 'components/AuthContainer/AuthContainer';\n\nexport default function Signin() {\n  return (\n    <AuthContainer>\n      <AuthImg />\n      <SigninForm />\n    </AuthContainer>\n  );\n}\n","import { useSearchParams } from 'react-router-dom';\nimport Signin from 'components/SignIn/SignIn';\nimport { useDispatch } from 'react-redux';\nimport { verify } from 'redux/auth/operations';\nimport { Helmet } from 'react-helmet-async';\n\nexport default function SigninPage() {\n  const [searchParams] = useSearchParams();\n  const verifyId = searchParams.get('verify');\n\n  const dispatch = useDispatch();\n\n  if (verifyId) {\n    setTimeout(() => dispatch(verify(verifyId)), 200);\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>Sign In</title>\n      </Helmet>\n      <Signin />\n    </>\n  );\n}\n"],"names":["RegistrationLinkStyled","styled","Link","_templateObject","_taggedTemplateLiteral","COLOR","TRANSITION","SIZE","RegistrationLink","_jsx","to","children","validationSchema","yup","email","matches","mailRegexp","required","password","min","SigninForm","dispatch","useDispatch","authError","useAuth","firstMessage","useRef","formik","useFormik","initialValues","onSubmit","values","_ref","resetForm","current","login","unwrap","then","originalPromiseResult","catch","rejectedValueOrSerializedError","msg","_jsxs","Box","toast","toastId","autoClose","FormSignin","handleSubmit","SigninLabel","SigninInputWrapper","className","submitCount","errors","touched","IconWrapper","EmailIcon","SigninInput","id","name","placeholder","autoComplete","value","onChange","handleChange","onBlur","handleBlur","_Fragment","Warning","ValidationIcon","onClick","setFieldValue","ErrorIcon","ValidIcon","LockIcon","type","ValidMessage","SigninButtonWrapper","SigninButton","Signin","AuthContainer","AuthImg","SigninPage","_useSearchParams","useSearchParams","verifyId","_slicedToArray","get","setTimeout","verify","Helmet"],"sourceRoot":""}